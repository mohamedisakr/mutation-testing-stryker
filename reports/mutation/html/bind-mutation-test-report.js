document.querySelector('mutation-test-report-app').report = {"files":{"D:\\Projects\\mutation-testing-stryker\\tests\\calculator.test.js":{"language":"javascript","mutants":[{"id":"0","location":{"end":{"column":22,"line":6},"start":{"column":10,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2","location":{"end":{"column":13,"line":8},"start":{"column":8,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1","location":{"end":{"column":2,"line":15},"start":{"column":30,"line":6}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"3","location":{"end":{"column":4,"line":14},"start":{"column":21,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"const {add} = require('../calculator')\r\n\r\n//#region\r\n// /*\r\n//\r\ndescribe(\"calculator\", () => {\r\n  //\r\n  test(\"add\", () => {\r\n    const a = 90;\r\n    const b = 90;\r\n    const expected = 180;\r\n    const actual = add(a, b);\r\n    expect(actual).toBe(expected);\r\n  });\r\n})"},"D:\\Projects\\mutation-testing-stryker\\tests\\grade.test.js":{"language":"javascript","mutants":[{"id":"4","location":{"end":{"column":51,"line":6},"start":{"column":10,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"5","location":{"end":{"column":2,"line":78},"start":{"column":59,"line":6}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"6","location":{"end":{"column":52,"line":8},"start":{"column":8,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"7","location":{"end":{"column":4,"line":14},"start":{"column":60,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"8","location":{"end":{"column":54,"line":17},"start":{"column":8,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"9","location":{"end":{"column":4,"line":23},"start":{"column":62,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"10","location":{"end":{"column":52,"line":26},"start":{"column":8,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"11","location":{"end":{"column":4,"line":32},"start":{"column":60,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"12","location":{"end":{"column":52,"line":35},"start":{"column":8,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"13","location":{"end":{"column":4,"line":41},"start":{"column":60,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"14","location":{"end":{"column":52,"line":44},"start":{"column":8,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"15","location":{"end":{"column":4,"line":50},"start":{"column":60,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"16","location":{"end":{"column":52,"line":53},"start":{"column":8,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"17","location":{"end":{"column":4,"line":59},"start":{"column":60,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"18","location":{"end":{"column":52,"line":62},"start":{"column":8,"line":62}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"20","location":{"end":{"column":45,"line":71},"start":{"column":8,"line":71}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"19","location":{"end":{"column":4,"line":68},"start":{"column":60,"line":62}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"21","location":{"end":{"column":4,"line":77},"start":{"column":53,"line":71}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"22","location":{"end":{"column":62,"line":86},"start":{"column":10,"line":86}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"25","location":{"end":{"column":4,"line":94},"start":{"column":57,"line":88}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"23","location":{"end":{"column":2,"line":220},"start":{"column":70,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"24","location":{"end":{"column":49,"line":88},"start":{"column":8,"line":88}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"26","location":{"end":{"column":55,"line":97},"start":{"column":8,"line":97}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"27","location":{"end":{"column":4,"line":103},"start":{"column":63,"line":97}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"28","location":{"end":{"column":42,"line":106},"start":{"column":8,"line":106}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"29","location":{"end":{"column":4,"line":112},"start":{"column":50,"line":106}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"30","location":{"end":{"column":56,"line":115},"start":{"column":8,"line":115}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"32","location":{"end":{"column":51,"line":124},"start":{"column":8,"line":124}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"31","location":{"end":{"column":4,"line":121},"start":{"column":64,"line":115}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"33","location":{"end":{"column":4,"line":130},"start":{"column":59,"line":124}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"35","location":{"end":{"column":4,"line":141},"start":{"column":65,"line":133}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"34","location":{"end":{"column":57,"line":133},"start":{"column":8,"line":133}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"37","location":{"end":{"column":57,"line":137},"start":{"column":52,"line":137}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"36","location":{"end":{"column":6,"line":138},"start":{"column":9,"line":136}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"38","location":{"end":{"column":6,"line":140},"start":{"column":17,"line":138}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"41","location":{"end":{"column":6,"line":149},"start":{"column":9,"line":147}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"40","location":{"end":{"column":4,"line":152},"start":{"column":62,"line":144}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"39","location":{"end":{"column":54,"line":144},"start":{"column":8,"line":144}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"44","location":{"end":{"column":44,"line":155},"start":{"column":8,"line":155}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"42","location":{"end":{"column":57,"line":148},"start":{"column":52,"line":148}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"43","location":{"end":{"column":6,"line":151},"start":{"column":17,"line":149}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"45","location":{"end":{"column":4,"line":161},"start":{"column":52,"line":155}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"48","location":{"end":{"column":38,"line":173},"start":{"column":8,"line":173}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"47","location":{"end":{"column":4,"line":170},"start":{"column":58,"line":164}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"46","location":{"end":{"column":50,"line":164},"start":{"column":8,"line":164}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"49","location":{"end":{"column":4,"line":179},"start":{"column":46,"line":173}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"51","location":{"end":{"column":4,"line":188},"start":{"column":59,"line":182}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"50","location":{"end":{"column":51,"line":182},"start":{"column":8,"line":182}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"52","location":{"end":{"column":47,"line":191},"start":{"column":8,"line":191}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"53","location":{"end":{"column":4,"line":197},"start":{"column":55,"line":191}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"55","location":{"end":{"column":4,"line":208},"start":{"column":61,"line":200}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"54","location":{"end":{"column":53,"line":200},"start":{"column":8,"line":200}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"56","location":{"end":{"column":6,"line":205},"start":{"column":9,"line":203}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"58","location":{"end":{"column":6,"line":207},"start":{"column":17,"line":205}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"57","location":{"end":{"column":57,"line":204},"start":{"column":52,"line":204}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"60","location":{"end":{"column":4,"line":219},"start":{"column":58,"line":211}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"59","location":{"end":{"column":50,"line":211},"start":{"column":8,"line":211}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"61","location":{"end":{"column":6,"line":216},"start":{"column":9,"line":214}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"62","location":{"end":{"column":57,"line":215},"start":{"column":52,"line":215}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"63","location":{"end":{"column":6,"line":218},"start":{"column":17,"line":216}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"65","location":{"end":{"column":2,"line":564},"start":{"column":51,"line":228}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"66","location":{"end":{"column":37,"line":230},"start":{"column":8,"line":230}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"64","location":{"end":{"column":43,"line":228},"start":{"column":10,"line":228}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"67","location":{"end":{"column":4,"line":238},"start":{"column":45,"line":230}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"69","location":{"end":{"column":6,"line":235},"start":{"column":9,"line":233}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"68","location":{"end":{"column":26,"line":231},"start":{"column":24,"line":231}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"70","location":{"end":{"column":57,"line":234},"start":{"column":52,"line":234}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"71","location":{"end":{"column":6,"line":237},"start":{"column":17,"line":235}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"73","location":{"end":{"column":4,"line":249},"start":{"column":53,"line":241}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"74","location":{"end":{"column":6,"line":246},"start":{"column":9,"line":244}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"72","location":{"end":{"column":45,"line":241},"start":{"column":8,"line":241}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"75","location":{"end":{"column":57,"line":245},"start":{"column":52,"line":245}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"76","location":{"end":{"column":6,"line":248},"start":{"column":17,"line":246}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"77","location":{"end":{"column":42,"line":252},"start":{"column":8,"line":252}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"78","location":{"end":{"column":4,"line":260},"start":{"column":50,"line":252}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"80","location":{"end":{"column":6,"line":257},"start":{"column":9,"line":255}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"79","location":{"end":{"column":30,"line":253},"start":{"column":24,"line":253}},"mutatorName":"UnaryOperator","replacement":"+10090","status":"Survived"},{"id":"81","location":{"end":{"column":57,"line":256},"start":{"column":52,"line":256}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"82","location":{"end":{"column":6,"line":259},"start":{"column":17,"line":257}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"83","location":{"end":{"column":42,"line":263},"start":{"column":8,"line":263}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"84","location":{"end":{"column":4,"line":271},"start":{"column":50,"line":263}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"85","location":{"end":{"column":6,"line":268},"start":{"column":9,"line":266}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"86","location":{"end":{"column":57,"line":267},"start":{"column":52,"line":267}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"88","location":{"end":{"column":48,"line":274},"start":{"column":8,"line":274}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"87","location":{"end":{"column":6,"line":270},"start":{"column":17,"line":268}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"90","location":{"end":{"column":31,"line":275},"start":{"column":24,"line":275}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"89","location":{"end":{"column":4,"line":282},"start":{"column":56,"line":274}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"92","location":{"end":{"column":57,"line":278},"start":{"column":52,"line":278}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"93","location":{"end":{"column":6,"line":281},"start":{"column":17,"line":279}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"91","location":{"end":{"column":6,"line":279},"start":{"column":9,"line":277}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"95","location":{"end":{"column":4,"line":293},"start":{"column":45,"line":285}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"94","location":{"end":{"column":37,"line":285},"start":{"column":8,"line":285}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"97","location":{"end":{"column":6,"line":290},"start":{"column":9,"line":288}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"98","location":{"end":{"column":57,"line":289},"start":{"column":52,"line":289}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"99","location":{"end":{"column":6,"line":292},"start":{"column":17,"line":290}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"96","location":{"end":{"column":29,"line":286},"start":{"column":24,"line":286}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"101","location":{"end":{"column":4,"line":304},"start":{"column":47,"line":296}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"100","location":{"end":{"column":39,"line":296},"start":{"column":8,"line":296}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"102","location":{"end":{"column":30,"line":297},"start":{"column":24,"line":297}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"103","location":{"end":{"column":6,"line":301},"start":{"column":9,"line":299}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"104","location":{"end":{"column":57,"line":300},"start":{"column":52,"line":300}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"105","location":{"end":{"column":6,"line":303},"start":{"column":17,"line":301}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"107","location":{"end":{"column":4,"line":315},"start":{"column":65,"line":307}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"106","location":{"end":{"column":57,"line":307},"start":{"column":8,"line":307}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"108","location":{"end":{"column":33,"line":308},"start":{"column":24,"line":308}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"110","location":{"end":{"column":57,"line":311},"start":{"column":52,"line":311}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"109","location":{"end":{"column":6,"line":312},"start":{"column":9,"line":310}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"111","location":{"end":{"column":6,"line":314},"start":{"column":17,"line":312}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"112","location":{"end":{"column":34,"line":319},"start":{"column":8,"line":319}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"113","location":{"end":{"column":4,"line":327},"start":{"column":42,"line":319}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"114","location":{"end":{"column":29,"line":320},"start":{"column":24,"line":320}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"115","location":{"end":{"column":6,"line":324},"start":{"column":9,"line":322}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"116","location":{"end":{"column":57,"line":323},"start":{"column":52,"line":323}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"117","location":{"end":{"column":6,"line":326},"start":{"column":17,"line":324}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"118","location":{"end":{"column":43,"line":331},"start":{"column":8,"line":331}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"119","location":{"end":{"column":4,"line":339},"start":{"column":51,"line":331}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"121","location":{"end":{"column":6,"line":336},"start":{"column":9,"line":334}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"120","location":{"end":{"column":31,"line":332},"start":{"column":24,"line":332}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"123","location":{"end":{"column":6,"line":338},"start":{"column":17,"line":336}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"122","location":{"end":{"column":57,"line":335},"start":{"column":52,"line":335}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"126","location":{"end":{"column":30,"line":343},"start":{"column":24,"line":343}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"125","location":{"end":{"column":4,"line":350},"start":{"column":51,"line":342}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"124","location":{"end":{"column":43,"line":342},"start":{"column":8,"line":342}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"127","location":{"end":{"column":6,"line":347},"start":{"column":9,"line":345}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"128","location":{"end":{"column":57,"line":346},"start":{"column":52,"line":346}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"130","location":{"end":{"column":48,"line":353},"start":{"column":8,"line":353}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"129","location":{"end":{"column":6,"line":349},"start":{"column":17,"line":347}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"131","location":{"end":{"column":4,"line":361},"start":{"column":56,"line":353}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"133","location":{"end":{"column":6,"line":358},"start":{"column":9,"line":356}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"132","location":{"end":{"column":32,"line":354},"start":{"column":24,"line":354}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"134","location":{"end":{"column":57,"line":357},"start":{"column":52,"line":357}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"136","location":{"end":{"column":44,"line":364},"start":{"column":8,"line":364}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"137","location":{"end":{"column":4,"line":372},"start":{"column":52,"line":364}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"135","location":{"end":{"column":6,"line":360},"start":{"column":17,"line":358}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"138","location":{"end":{"column":34,"line":365},"start":{"column":24,"line":365}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"142","location":{"end":{"column":53,"line":375},"start":{"column":8,"line":375}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"139","location":{"end":{"column":6,"line":369},"start":{"column":9,"line":367}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"140","location":{"end":{"column":57,"line":368},"start":{"column":52,"line":368}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"141","location":{"end":{"column":6,"line":371},"start":{"column":17,"line":369}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"143","location":{"end":{"column":4,"line":383},"start":{"column":61,"line":375}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"144","location":{"end":{"column":32,"line":376},"start":{"column":24,"line":376}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"145","location":{"end":{"column":6,"line":380},"start":{"column":9,"line":378}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"146","location":{"end":{"column":57,"line":379},"start":{"column":52,"line":379}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"147","location":{"end":{"column":6,"line":382},"start":{"column":17,"line":380}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"148","location":{"end":{"column":60,"line":386},"start":{"column":8,"line":386}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"149","location":{"end":{"column":4,"line":394},"start":{"column":68,"line":386}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"150","location":{"end":{"column":32,"line":387},"start":{"column":24,"line":387}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"151","location":{"end":{"column":6,"line":391},"start":{"column":9,"line":389}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"154","location":{"end":{"column":33,"line":399},"start":{"column":8,"line":399}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"152","location":{"end":{"column":79,"line":390},"start":{"column":74,"line":390}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"153","location":{"end":{"column":6,"line":393},"start":{"column":17,"line":391}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"157","location":{"end":{"column":6,"line":404},"start":{"column":9,"line":402}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"155","location":{"end":{"column":4,"line":407},"start":{"column":41,"line":399}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"158","location":{"end":{"column":57,"line":403},"start":{"column":52,"line":403}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"156","location":{"end":{"column":21,"line":401},"start":{"column":19,"line":401}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"160","location":{"end":{"column":41,"line":410},"start":{"column":8,"line":410}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"161","location":{"end":{"column":4,"line":418},"start":{"column":49,"line":410}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"162","location":{"end":{"column":6,"line":415},"start":{"column":9,"line":413}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"159","location":{"end":{"column":6,"line":406},"start":{"column":17,"line":404}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"163","location":{"end":{"column":57,"line":414},"start":{"column":52,"line":414}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"164","location":{"end":{"column":6,"line":417},"start":{"column":17,"line":415}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"165","location":{"end":{"column":38,"line":421},"start":{"column":8,"line":421}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"166","location":{"end":{"column":4,"line":429},"start":{"column":46,"line":421}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"169","location":{"end":{"column":57,"line":425},"start":{"column":52,"line":425}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"167","location":{"end":{"column":25,"line":423},"start":{"column":19,"line":423}},"mutatorName":"UnaryOperator","replacement":"+10090","status":"Survived"},{"id":"168","location":{"end":{"column":6,"line":426},"start":{"column":9,"line":424}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"170","location":{"end":{"column":6,"line":428},"start":{"column":17,"line":426}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"171","location":{"end":{"column":38,"line":432},"start":{"column":8,"line":432}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"172","location":{"end":{"column":4,"line":440},"start":{"column":46,"line":432}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"174","location":{"end":{"column":57,"line":436},"start":{"column":52,"line":436}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"173","location":{"end":{"column":6,"line":437},"start":{"column":9,"line":435}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"178","location":{"end":{"column":26,"line":445},"start":{"column":19,"line":445}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"176","location":{"end":{"column":44,"line":443},"start":{"column":8,"line":443}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"177","location":{"end":{"column":4,"line":451},"start":{"column":52,"line":443}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"175","location":{"end":{"column":6,"line":439},"start":{"column":17,"line":437}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"181","location":{"end":{"column":6,"line":450},"start":{"column":17,"line":448}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"180","location":{"end":{"column":57,"line":447},"start":{"column":52,"line":447}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"179","location":{"end":{"column":6,"line":448},"start":{"column":9,"line":446}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"182","location":{"end":{"column":33,"line":454},"start":{"column":8,"line":454}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"183","location":{"end":{"column":4,"line":462},"start":{"column":41,"line":454}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"184","location":{"end":{"column":24,"line":456},"start":{"column":19,"line":456}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"187","location":{"end":{"column":6,"line":461},"start":{"column":17,"line":459}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"186","location":{"end":{"column":57,"line":458},"start":{"column":52,"line":458}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"185","location":{"end":{"column":6,"line":459},"start":{"column":9,"line":457}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"189","location":{"end":{"column":4,"line":473},"start":{"column":43,"line":465}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"191","location":{"end":{"column":6,"line":470},"start":{"column":9,"line":468}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"190","location":{"end":{"column":25,"line":467},"start":{"column":19,"line":467}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"188","location":{"end":{"column":35,"line":465},"start":{"column":8,"line":465}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"192","location":{"end":{"column":57,"line":469},"start":{"column":52,"line":469}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"193","location":{"end":{"column":6,"line":472},"start":{"column":17,"line":470}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"194","location":{"end":{"column":53,"line":476},"start":{"column":8,"line":476}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"195","location":{"end":{"column":4,"line":484},"start":{"column":61,"line":476}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"196","location":{"end":{"column":28,"line":478},"start":{"column":19,"line":478}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"197","location":{"end":{"column":6,"line":481},"start":{"column":9,"line":479}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"199","location":{"end":{"column":6,"line":483},"start":{"column":17,"line":481}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"200","location":{"end":{"column":30,"line":488},"start":{"column":8,"line":488}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"198","location":{"end":{"column":57,"line":480},"start":{"column":52,"line":480}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"201","location":{"end":{"column":4,"line":496},"start":{"column":38,"line":488}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"202","location":{"end":{"column":24,"line":490},"start":{"column":19,"line":490}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"203","location":{"end":{"column":6,"line":493},"start":{"column":9,"line":491}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"204","location":{"end":{"column":57,"line":492},"start":{"column":52,"line":492}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"207","location":{"end":{"column":4,"line":508},"start":{"column":46,"line":500}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"205","location":{"end":{"column":6,"line":495},"start":{"column":17,"line":493}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"208","location":{"end":{"column":26,"line":502},"start":{"column":19,"line":502}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"206","location":{"end":{"column":38,"line":500},"start":{"column":8,"line":500}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"209","location":{"end":{"column":6,"line":505},"start":{"column":9,"line":503}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"211","location":{"end":{"column":6,"line":507},"start":{"column":17,"line":505}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"210","location":{"end":{"column":57,"line":504},"start":{"column":52,"line":504}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"212","location":{"end":{"column":38,"line":511},"start":{"column":8,"line":511}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"213","location":{"end":{"column":4,"line":519},"start":{"column":46,"line":511}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"214","location":{"end":{"column":25,"line":513},"start":{"column":19,"line":513}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"215","location":{"end":{"column":6,"line":516},"start":{"column":9,"line":514}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"216","location":{"end":{"column":57,"line":515},"start":{"column":52,"line":515}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"217","location":{"end":{"column":6,"line":518},"start":{"column":17,"line":516}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"218","location":{"end":{"column":43,"line":522},"start":{"column":8,"line":522}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"219","location":{"end":{"column":4,"line":530},"start":{"column":51,"line":522}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"220","location":{"end":{"column":27,"line":524},"start":{"column":19,"line":524}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"222","location":{"end":{"column":57,"line":526},"start":{"column":52,"line":526}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"223","location":{"end":{"column":6,"line":529},"start":{"column":17,"line":527}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"221","location":{"end":{"column":6,"line":527},"start":{"column":9,"line":525}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"224","location":{"end":{"column":39,"line":533},"start":{"column":8,"line":533}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"225","location":{"end":{"column":4,"line":541},"start":{"column":47,"line":533}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"228","location":{"end":{"column":57,"line":537},"start":{"column":52,"line":537}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"227","location":{"end":{"column":6,"line":538},"start":{"column":9,"line":536}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"226","location":{"end":{"column":29,"line":535},"start":{"column":19,"line":535}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"229","location":{"end":{"column":6,"line":540},"start":{"column":17,"line":538}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"230","location":{"end":{"column":48,"line":544},"start":{"column":8,"line":544}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"231","location":{"end":{"column":4,"line":552},"start":{"column":56,"line":544}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"232","location":{"end":{"column":27,"line":546},"start":{"column":19,"line":546}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"233","location":{"end":{"column":6,"line":549},"start":{"column":9,"line":547}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"234","location":{"end":{"column":57,"line":548},"start":{"column":52,"line":548}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"235","location":{"end":{"column":6,"line":551},"start":{"column":17,"line":549}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"236","location":{"end":{"column":55,"line":555},"start":{"column":8,"line":555}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"237","location":{"end":{"column":4,"line":563},"start":{"column":63,"line":555}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"238","location":{"end":{"column":32,"line":556},"start":{"column":24,"line":556}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"239","location":{"end":{"column":6,"line":560},"start":{"column":9,"line":558}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"241","location":{"end":{"column":6,"line":562},"start":{"column":17,"line":560}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"240","location":{"end":{"column":79,"line":559},"start":{"column":74,"line":559}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"}],"source":"const{ computeGrade, GradeType, attendanceError, marksError } = require('../grade')\r\n\r\n//#region\r\n// /*\r\n//\r\ndescribe(\"8 test cases for decision table testing\", () => {\r\n  //\r\n  test(\"(1) attendance < 80% && any marks (<= 100)\", () => {\r\n    const attendance = 70;\r\n    const marks = 90;\r\n    const expected = GradeType.F_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"(2) attendance > 80% && 90% <= marks <= 100%\", () => {\r\n    const attendance = 90;\r\n    const marks = 90;\r\n    const expected = GradeType.A_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"(3) attendance > 80% && 80% <= marks < 90%\", () => {\r\n    const attendance = 90;\r\n    const marks = 89;\r\n    const expected = GradeType.B_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"(4) attendance > 80% && 70% <= marks < 80%\", () => {\r\n    const attendance = 90;\r\n    const marks = 79;\r\n    const expected = GradeType.C_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"(5) attendance > 80% && 60% <= marks < 70%\", () => {\r\n    const attendance = 90;\r\n    const marks = 69;\r\n    const expected = GradeType.D_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"(6) attendance > 80% && 50% <= marks < 60%\", () => {\r\n    const attendance = 90;\r\n    const marks = 59;\r\n    const expected = GradeType.E_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"(7) attendance > 80% && 30% <= marks < 50%\", () => {\r\n    const attendance = 90;\r\n    const marks = 40;\r\n    const expected = GradeType.F_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"(8) attendance > 80% && marks < 30%\", () => {\r\n    const attendance = 90;\r\n    const marks = 29;\r\n    const expected = GradeType.F_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n});\r\n// */\r\n//#endregion\r\n\r\n//#region\r\n// ******************************************************************\r\n// /*\r\n//\r\ndescribe(\"Boundary Value Analysis + Equivalence Partitioning\", () => {\r\n  //\r\n  test(\"1. (attendance) the LB (lower bound)  1\", () => {\r\n    const attendance = 1;\r\n    const marks = 90;\r\n    const expected = GradeType.F_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"2. (attendance) above the LB (lower bound)  2\", () => {\r\n    const attendance = 2;\r\n    const marks = 90;\r\n    const expected = GradeType.F_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"3. (attendance) nominal value 50\", () => {\r\n    const attendance = 50;\r\n    const marks = 90;\r\n    const expected = GradeType.F_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"4. (attendance) below the UB (upper bound)  99\", () => {\r\n    const attendance = 99;\r\n    const marks = 99;\r\n    const expected = GradeType.A_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"5. (attendance) the UB (upper bound)  100\", () => {\r\n    const attendance = 100;\r\n    const marks = 99;\r\n    const expected = GradeType.A_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  // invalid\r\n  test(\"6. (attendance) above the UB (upper bound)  101\", () => {\r\n    const attendance = 101;\r\n    const marks = 99;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  // invalid\r\n  test(\"7. (attendance) below the LB (lower bound) 0\", () => {\r\n    const attendance = 0;\r\n    const marks = 99;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  //\r\n  test(\"8. (marks) the LB (lower bound)  1\", () => {\r\n    const attendance = 90;\r\n    const marks = 1;\r\n    const expected = GradeType.F_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"9. (marks) above the LB (lower bound)  2\", () => {\r\n    const attendance = 90;\r\n    const marks = 2;\r\n    const expected = GradeType.F_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"10. (marks) nominal value 50\", () => {\r\n    const attendance = 90;\r\n    const marks = 50;\r\n    const expected = GradeType.E_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"11. (marks) below the UB (upper bound) 99\", () => {\r\n    const attendance = 99;\r\n    const marks = 99;\r\n    const expected = GradeType.A_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  //\r\n  test(\"12. (marks) the UB (upper bound)  100\", () => {\r\n    const attendance = 99;\r\n    const marks = 100;\r\n    const expected = GradeType.A_Grade;\r\n    const actual = computeGrade(attendance, marks);\r\n    expect(actual).toBe(expected);\r\n  });\r\n\r\n  // invalid\r\n  test(\"13. (marks) above the UB (upper bound)  101\", () => {\r\n    const attendance = 99;\r\n    const marks = 101;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  // invalid\r\n  test(\"14. (marks) below the LB (lower bound) 0\", () => {\r\n    const attendance = 99;\r\n    const marks = 0;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n});\r\n// */\r\n//#endregion\r\n\r\n// ******************************************************************\r\n\r\n// /*\r\n//\r\ndescribe(\"Error Guessing + Special Values\", () => {\r\n  //\r\n  test(\"1 (attendance) empty string\", () => {\r\n    const attendance = \"\";\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  //\r\n  test(\"2. (attendance) decimal value 12.41\", () => {\r\n    const attendance = 12.41;\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  //\r\n  test(\"3 (attendance) Far below the LB \", () => {\r\n    const attendance = -10090;\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  //\r\n  test(\"4 (attendance) Far above the UB \", () => {\r\n    const attendance = 12347;\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  // \"adfkh\" => non digits (characters)\r\n  test(\"5 (attendance) non digits (characters)\", () => {\r\n    const attendance = \"adfkh\";\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  // \"   \" => white spaces\r\n  test(\"6 (attendance) white spaces\", () => {\r\n    const attendance = \"   \";\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  // \" 100\" => leading spaces\r\n  test(\"7 (attendance) leading spaces\", () => {\r\n    const attendance = \" 100\";\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  // \"  123  \" => many leading and trailing spaces\r\n  test(\"8 (attendance) many leading and trailing spaces\", () => {\r\n    const attendance = \"  123  \";\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  // \"034\" => leading 0 ===>>> 28\r\n  // 034 ===>>> SyntaxError: Legacy octal literals are not allowed in strict mode\r\n  test(\"9 (attendance) leading 0\", () => {\r\n    const attendance = \"034\"; // 034; //\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  // \"00012\" => many leading zero\r\n  // 00012 ===>>> SyntaxError: Legacy octal literals are not allowed in strict mode\r\n  test(\"10 (attendance) many leading zero\", () => {\r\n    const attendance = \"00012\"; //  00012; //\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  // \" +98\" => leading && + sign\r\n  test(\"11 (attendance) leading && + sign\", () => {\r\n    const attendance = \" +98\"; // \" +98\" ;\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  // \"   *24\" => many leading && + sign ===>>> Uncaught SyntaxError: Unexpected token '*',  NaN\r\n  test(\"12 (attendance) many leading && + sign\", () => {\r\n    const attendance = \"   *24\"; // *24; //\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  // \"!@#$&*()\" => special characters\r\n  test(\"13 (attendance) special characters\", () => {\r\n    const attendance = \"!@#$&*()\"; // \"!@#$&*()\" ;\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  // \"number\" => javascript keyword\r\n  test(\"14 (attendance) javascript reserved keyword\", () => {\r\n    const attendance = \"number\";\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  // \"10\", \"100\", \"12\" => # of arguments (more than 1 input)\r\n  test(\"15 (attendance) # of arguments (more than 1 input)\", () => {\r\n    const attendance = \"number\";\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks, 1000, 20000, 3090909)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n\r\n  //*************************************************************/\r\n\r\n  //\r\n  test(\"16 (marks) empty string\", () => {\r\n    const attendance = 90;\r\n    const marks = \"\";\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  //\r\n  test(\"17. (marks) decimal value 12.41\", () => {\r\n    const attendance = 90;\r\n    const marks = 12.41;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  //\r\n  test(\"18 (marks) Far below the LB \", () => {\r\n    const attendance = 90;\r\n    const marks = -10090;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  //\r\n  test(\"19 (marks) Far above the UB \", () => {\r\n    const attendance = 90;\r\n    const marks = 12347;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  // \"adfkh\" => non digits (characters)\r\n  test(\"20 (marks) non digits (characters)\", () => {\r\n    const attendance = 90;\r\n    const marks = \"adfkh\";\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  // \"   \" => white spaces\r\n  test(\"21 (marks) white spaces\", () => {\r\n    const attendance = 90;\r\n    const marks = \"   \";\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  // \" 100\" => leading spaces\r\n  test(\"22 (marks) leading spaces\", () => {\r\n    const attendance = 90;\r\n    const marks = \" 100\";\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  // \"  123  \" => many leading and trailing spaces\r\n  test(\"23 (marks) many leading and trailing spaces\", () => {\r\n    const attendance = 90;\r\n    const marks = \"  123  \";\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  // \"034\" => leading 0 ===>>> 28\r\n  // 034 ===>>> SyntaxError: Legacy octal literals are not allowed in strict mode\r\n  test(\"24 (marks) leading 0\", () => {\r\n    const attendance = 90;\r\n    const marks = \"034\"; // 034; //\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  // \"00012\" => many leading zero\r\n  // 00012 ===>>> SyntaxError: Legacy octal literals are not allowed in strict mode\r\n  test(\"25 (marks) many leading zero\", () => {\r\n    const attendance = 90;\r\n    const marks = \"00012\"; //  00012; //\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  // \" +98\" => leading && + sign\r\n  test(\"26 (marks) leading && + sign\", () => {\r\n    const attendance = 90;\r\n    const marks = \" +98\"; // \" +98\" ;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  // \"   *24\" => many leading && + sign ===>>> Uncaught SyntaxError: Unexpected token '*',  NaN\r\n  test(\"27 (marks) many leading && + sign\", () => {\r\n    const attendance = 90;\r\n    const marks = \"   *24\"; // *24; //\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  // \"!@#$&*()\" => special characters\r\n  test(\"28 (marks) special characters\", () => {\r\n    const attendance = 90;\r\n    const marks = \"!@#$&*()\"; // \"!@#$&*()\" ;\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  // \"number\" => javascript keyword\r\n  test(\"29 (marks) javascript reserved keyword\", () => {\r\n    const attendance = 90;\r\n    const marks = \"number\";\r\n    try {\r\n      expect(computeGrade(attendance, marks)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(marksError);\r\n    }\r\n  });\r\n\r\n  // \"10\", \"100\", \"12\" => # of arguments (more than 1 input)\r\n  test(\"30 (marks) # of arguments (more than 1 input)\", () => {\r\n    const attendance = \"number\";\r\n    const marks = 90;\r\n    try {\r\n      expect(computeGrade(attendance, marks, 1000, 20000, 3090909)).toBe(false);\r\n    } catch (e) {\r\n      expect(e.message).toBe(attendanceError);\r\n    }\r\n  });\r\n});\r\n\r\n// */\r\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null}};